{
	"id": "68e100435cd7631f9670fb9a3d06422b",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.0",
	"solcLongVersion": "0.8.0+commit.c7dfd78e",
	"input": {
		"language": "Solidity",
		"sources": {
			"test.sol": {
				"content": "pragma solidity ^0.8.0;\n\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol\";\ncontract testing {\n\nusing SafeMath for uint256;\nfunction buy() external payable {\n\n    uint amount = 0;\n    uint tax = msg.value/1000 * 500;\n    amount = msg.value - tax;\n    payable(0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB).transfer(msg.value - tax);\n    payable(0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db).transfer(amount);\n\n}\n\nfunction checkBalance() public view returns(uint256 val){\n    return address(0xf80e7EE0f5dbB0f05dA199a386B01416cA62b0d5).balance;\n     \n}\n\n\n}"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol\":467:6767  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol\":467:6767  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212203943e1c2a4a26da6068d5595092e6edd094adc9107705019299748b1541066e664736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203943e1c2a4a26da6068d5595092e6edd094adc9107705019299748b1541066e664736f6c63430008000033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODECOPY NUMBER 0xE1 0xC2 LOG4 LOG2 PUSH14 0xA6068D5595092E6EDD094ADC9107 PUSH17 0x5019299748B1541066E664736F6C634300 ADDMOD STOP STOP CALLER ",
							"sourceMap": "467:6300:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203943e1c2a4a26da6068d5595092e6edd094adc9107705019299748b1541066e664736f6c63430008000033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODECOPY NUMBER 0xE1 0xC2 LOG4 LOG2 PUSH14 0xA6068D5595092E6EDD094ADC9107 PUSH17 0x5019299748B1541066E664736F6C634300 ADDMOD STOP STOP CALLER ",
							"sourceMap": "467:6300:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 467,
									"end": 6767,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "PUSH",
									"source": 0,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "PUSH",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6767,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212203943e1c2a4a26da6068d5595092e6edd094adc9107705019299748b1541066e664736f6c63430008000033",
									".code": [
										{
											"begin": 467,
											"end": 6767,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 467,
											"end": 6767,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 467,
											"end": 6767,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 467,
											"end": 6767,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 467,
											"end": 6767,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 467,
											"end": 6767,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 467,
											"end": 6767,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 467,
											"end": 6767,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 467,
											"end": 6767,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x80a62a632fb210251e8a7632c66d8624fd1c2e60b75b3e08c8b04803abec336f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0163070ead773cf28c76b7d88abb8ecf1c0a2cebda62cc44ca91f60faae361d6\",\"dweb:/ipfs/QmfVwE4pVia7L7LMbSkQRUWzmX6f4XpdagrrXh7or2qhyd\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"test.sol": {
				"testing": {
					"abi": [
						{
							"inputs": [],
							"name": "buy",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "checkBalance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "val",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"test.sol\":136:609  contract testing {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"test.sol\":136:609  contract testing {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xa6f2ae3a\n      eq\n      tag_2\n      jumpi\n      dup1\n      0xc71daccb\n      eq\n      tag_3\n      jumpi\n    tag_1:\n      0x00\n      dup1\n      revert\n        /* \"test.sol\":184:466  function buy() external payable {... */\n    tag_2:\n      tag_4\n      tag_5\n      jump\t// in\n    tag_4:\n      stop\n        /* \"test.sol\":468:605  function checkBalance() public view returns(uint256 val){... */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_6\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_6:\n      pop\n      tag_7\n      tag_8\n      jump\t// in\n    tag_7:\n      mload(0x40)\n      tag_9\n      swap2\n      swap1\n      tag_10\n      jump\t// in\n    tag_9:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"test.sol\":184:466  function buy() external payable {... */\n    tag_5:\n        /* \"test.sol\":223:234  uint amount */\n      0x00\n        /* \"test.sol\":244:252  uint tax */\n      dup1\n        /* \"test.sol\":272:275  500 */\n      0x01f4\n        /* \"test.sol\":265:269  1000 */\n      0x03e8\n        /* \"test.sol\":255:264  msg.value */\n      callvalue\n        /* \"test.sol\":255:269  msg.value/1000 */\n      tag_12\n      swap2\n      swap1\n      tag_13\n      jump\t// in\n    tag_12:\n        /* \"test.sol\":255:275  msg.value/1000 * 500 */\n      tag_14\n      swap2\n      swap1\n      tag_15\n      jump\t// in\n    tag_14:\n        /* \"test.sol\":244:275  uint tax = msg.value/1000 * 500 */\n      swap1\n      pop\n        /* \"test.sol\":302:305  tax */\n      dup1\n        /* \"test.sol\":290:299  msg.value */\n      callvalue\n        /* \"test.sol\":290:305  msg.value - tax */\n      tag_16\n      swap2\n      swap1\n      tag_17\n      jump\t// in\n    tag_16:\n        /* \"test.sol\":281:305  amount = msg.value - tax */\n      swap2\n      pop\n        /* \"test.sol\":319:361  0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB */\n      0x78731d3ca6b7e34ac0f824c42a7cc18a495cabab\n        /* \"test.sol\":311:371  payable(0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB).transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"test.sol\":311:388  payable(0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB).transfer(msg.value - tax) */\n      0x08fc\n        /* \"test.sol\":384:387  tax */\n      dup3\n        /* \"test.sol\":372:381  msg.value */\n      callvalue\n        /* \"test.sol\":372:387  msg.value - tax */\n      tag_18\n      swap2\n      swap1\n      tag_17\n      jump\t// in\n    tag_18:\n        /* \"test.sol\":311:388  payable(0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB).transfer(msg.value - tax) */\n      swap1\n      dup2\n      iszero\n      mul\n      swap1\n      mload(0x40)\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup9\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_20\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_20:\n      pop\n        /* \"test.sol\":402:444  0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db */\n      0x4b20993bc481177ec7e8f571cecae8a9e22c02db\n        /* \"test.sol\":394:454  payable(0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db).transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"test.sol\":394:462  payable(0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db).transfer(amount) */\n      0x08fc\n        /* \"test.sol\":455:461  amount */\n      dup4\n        /* \"test.sol\":394:462  payable(0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db).transfer(amount) */\n      swap1\n      dup2\n      iszero\n      mul\n      swap1\n      mload(0x40)\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup9\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_22\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_22:\n      pop\n        /* \"test.sol\":184:466  function buy() external payable {... */\n      pop\n      pop\n      jump\t// out\n        /* \"test.sol\":468:605  function checkBalance() public view returns(uint256 val){... */\n    tag_8:\n        /* \"test.sol\":512:523  uint256 val */\n      0x00\n        /* \"test.sol\":545:587  0xf80e7EE0f5dbB0f05dA199a386B01416cA62b0d5 */\n      0xf80e7ee0f5dbb0f05da199a386b01416ca62b0d5\n        /* \"test.sol\":537:596  address(0xf80e7EE0f5dbB0f05dA199a386B01416cA62b0d5).balance */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      balance\n        /* \"test.sol\":530:596  return address(0xf80e7EE0f5dbB0f05dA199a386B01416cA62b0d5).balance */\n      swap1\n      pop\n        /* \"test.sol\":468:605  function checkBalance() public view returns(uint256 val){... */\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":7:125   */\n    tag_25:\n        /* \"#utility.yul\":94:118   */\n      tag_27\n        /* \"#utility.yul\":112:117   */\n      dup2\n        /* \"#utility.yul\":94:118   */\n      tag_28\n      jump\t// in\n    tag_27:\n        /* \"#utility.yul\":89:92   */\n      dup3\n        /* \"#utility.yul\":82:119   */\n      mstore\n        /* \"#utility.yul\":72:125   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":131:353   */\n    tag_10:\n      0x00\n        /* \"#utility.yul\":262:264   */\n      0x20\n        /* \"#utility.yul\":251:260   */\n      dup3\n        /* \"#utility.yul\":247:265   */\n      add\n        /* \"#utility.yul\":239:265   */\n      swap1\n      pop\n        /* \"#utility.yul\":275:346   */\n      tag_30\n        /* \"#utility.yul\":343:344   */\n      0x00\n        /* \"#utility.yul\":332:341   */\n      dup4\n        /* \"#utility.yul\":328:345   */\n      add\n        /* \"#utility.yul\":319:325   */\n      dup5\n        /* \"#utility.yul\":275:346   */\n      tag_25\n      jump\t// in\n    tag_30:\n        /* \"#utility.yul\":229:353   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":359:544   */\n    tag_13:\n      0x00\n        /* \"#utility.yul\":416:436   */\n      tag_32\n        /* \"#utility.yul\":434:435   */\n      dup3\n        /* \"#utility.yul\":416:436   */\n      tag_28\n      jump\t// in\n    tag_32:\n        /* \"#utility.yul\":411:436   */\n      swap2\n      pop\n        /* \"#utility.yul\":450:470   */\n      tag_33\n        /* \"#utility.yul\":468:469   */\n      dup4\n        /* \"#utility.yul\":450:470   */\n      tag_28\n      jump\t// in\n    tag_33:\n        /* \"#utility.yul\":445:470   */\n      swap3\n      pop\n        /* \"#utility.yul\":489:490   */\n      dup3\n        /* \"#utility.yul\":479:481   */\n      tag_34\n      jumpi\n        /* \"#utility.yul\":494:512   */\n      tag_35\n      tag_36\n      jump\t// in\n    tag_35:\n        /* \"#utility.yul\":479:481   */\n    tag_34:\n        /* \"#utility.yul\":536:537   */\n      dup3\n        /* \"#utility.yul\":533:534   */\n      dup3\n        /* \"#utility.yul\":529:538   */\n      div\n        /* \"#utility.yul\":524:538   */\n      swap1\n      pop\n        /* \"#utility.yul\":401:544   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":550:898   */\n    tag_15:\n      0x00\n        /* \"#utility.yul\":613:633   */\n      tag_38\n        /* \"#utility.yul\":631:632   */\n      dup3\n        /* \"#utility.yul\":613:633   */\n      tag_28\n      jump\t// in\n    tag_38:\n        /* \"#utility.yul\":608:633   */\n      swap2\n      pop\n        /* \"#utility.yul\":647:667   */\n      tag_39\n        /* \"#utility.yul\":665:666   */\n      dup4\n        /* \"#utility.yul\":647:667   */\n      tag_28\n      jump\t// in\n    tag_39:\n        /* \"#utility.yul\":642:667   */\n      swap3\n      pop\n        /* \"#utility.yul\":835:836   */\n      dup2\n        /* \"#utility.yul\":767:833   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":763:837   */\n      div\n        /* \"#utility.yul\":760:761   */\n      dup4\n        /* \"#utility.yul\":757:838   */\n      gt\n        /* \"#utility.yul\":752:753   */\n      dup3\n        /* \"#utility.yul\":745:754   */\n      iszero\n        /* \"#utility.yul\":738:755   */\n      iszero\n        /* \"#utility.yul\":734:839   */\n      and\n        /* \"#utility.yul\":731:733   */\n      iszero\n      tag_40\n      jumpi\n        /* \"#utility.yul\":842:860   */\n      tag_41\n      tag_42\n      jump\t// in\n    tag_41:\n        /* \"#utility.yul\":731:733   */\n    tag_40:\n        /* \"#utility.yul\":890:891   */\n      dup3\n        /* \"#utility.yul\":887:888   */\n      dup3\n        /* \"#utility.yul\":883:892   */\n      mul\n        /* \"#utility.yul\":872:892   */\n      swap1\n      pop\n        /* \"#utility.yul\":598:898   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":904:1095   */\n    tag_17:\n      0x00\n        /* \"#utility.yul\":964:984   */\n      tag_44\n        /* \"#utility.yul\":982:983   */\n      dup3\n        /* \"#utility.yul\":964:984   */\n      tag_28\n      jump\t// in\n    tag_44:\n        /* \"#utility.yul\":959:984   */\n      swap2\n      pop\n        /* \"#utility.yul\":998:1018   */\n      tag_45\n        /* \"#utility.yul\":1016:1017   */\n      dup4\n        /* \"#utility.yul\":998:1018   */\n      tag_28\n      jump\t// in\n    tag_45:\n        /* \"#utility.yul\":993:1018   */\n      swap3\n      pop\n        /* \"#utility.yul\":1037:1038   */\n      dup3\n        /* \"#utility.yul\":1034:1035   */\n      dup3\n        /* \"#utility.yul\":1031:1039   */\n      lt\n        /* \"#utility.yul\":1028:1030   */\n      iszero\n      tag_46\n      jumpi\n        /* \"#utility.yul\":1042:1060   */\n      tag_47\n      tag_42\n      jump\t// in\n    tag_47:\n        /* \"#utility.yul\":1028:1030   */\n    tag_46:\n        /* \"#utility.yul\":1087:1088   */\n      dup3\n        /* \"#utility.yul\":1084:1085   */\n      dup3\n        /* \"#utility.yul\":1080:1089   */\n      sub\n        /* \"#utility.yul\":1072:1089   */\n      swap1\n      pop\n        /* \"#utility.yul\":949:1095   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1101:1178   */\n    tag_28:\n      0x00\n        /* \"#utility.yul\":1167:1172   */\n      dup2\n        /* \"#utility.yul\":1156:1172   */\n      swap1\n      pop\n        /* \"#utility.yul\":1146:1178   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1184:1364   */\n    tag_42:\n        /* \"#utility.yul\":1232:1309   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":1229:1230   */\n      0x00\n        /* \"#utility.yul\":1222:1310   */\n      mstore\n        /* \"#utility.yul\":1329:1333   */\n      0x11\n        /* \"#utility.yul\":1326:1327   */\n      0x04\n        /* \"#utility.yul\":1319:1334   */\n      mstore\n        /* \"#utility.yul\":1353:1357   */\n      0x24\n        /* \"#utility.yul\":1350:1351   */\n      0x00\n        /* \"#utility.yul\":1343:1358   */\n      revert\n        /* \"#utility.yul\":1370:1550   */\n    tag_36:\n        /* \"#utility.yul\":1418:1495   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":1415:1416   */\n      0x00\n        /* \"#utility.yul\":1408:1496   */\n      mstore\n        /* \"#utility.yul\":1515:1519   */\n      0x12\n        /* \"#utility.yul\":1512:1513   */\n      0x04\n        /* \"#utility.yul\":1505:1520   */\n      mstore\n        /* \"#utility.yul\":1539:1543   */\n      0x24\n        /* \"#utility.yul\":1536:1537   */\n      0x00\n        /* \"#utility.yul\":1529:1544   */\n      revert\n\n    auxdata: 0xa26469706673582212205362e4668afd9413e1272c38cdfa7ebd4427537b589f01ce9b1fa0bb7f81da8b64736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50610310806100206000396000f3fe6080604052600436106100295760003560e01c8063a6f2ae3a1461002e578063c71daccb14610038575b600080fd5b610036610063565b005b34801561004457600080fd5b5061004d610156565b60405161005a9190610198565b60405180910390f35b6000806101f46103e83461007791906101b3565b61008191906101e4565b9050803461008f919061023e565b91507378731d3ca6b7e34ac0f824c42a7cc18a495cabab73ffffffffffffffffffffffffffffffffffffffff166108fc82346100cb919061023e565b9081150290604051600060405180830381858888f193505050501580156100f6573d6000803e3d6000fd5b50734b20993bc481177ec7e8f571cecae8a9e22c02db73ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610151573d6000803e3d6000fd5b505050565b600073f80e7ee0f5dbb0f05da199a386b01416ca62b0d573ffffffffffffffffffffffffffffffffffffffff1631905090565b61019281610272565b82525050565b60006020820190506101ad6000830184610189565b92915050565b60006101be82610272565b91506101c983610272565b9250826101d9576101d86102ab565b5b828204905092915050565b60006101ef82610272565b91506101fa83610272565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156102335761023261027c565b5b828202905092915050565b600061024982610272565b915061025483610272565b9250828210156102675761026661027c565b5b828203905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea26469706673582212205362e4668afd9413e1272c38cdfa7ebd4427537b589f01ce9b1fa0bb7f81da8b64736f6c63430008000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x310 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x29 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA6F2AE3A EQ PUSH2 0x2E JUMPI DUP1 PUSH4 0xC71DACCB EQ PUSH2 0x38 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x36 PUSH2 0x63 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D PUSH2 0x156 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5A SWAP2 SWAP1 PUSH2 0x198 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1F4 PUSH2 0x3E8 CALLVALUE PUSH2 0x77 SWAP2 SWAP1 PUSH2 0x1B3 JUMP JUMPDEST PUSH2 0x81 SWAP2 SWAP1 PUSH2 0x1E4 JUMP JUMPDEST SWAP1 POP DUP1 CALLVALUE PUSH2 0x8F SWAP2 SWAP1 PUSH2 0x23E JUMP JUMPDEST SWAP2 POP PUSH20 0x78731D3CA6B7E34AC0F824C42A7CC18A495CABAB PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 CALLVALUE PUSH2 0xCB SWAP2 SWAP1 PUSH2 0x23E JUMP JUMPDEST SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xF6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH20 0x4B20993BC481177EC7E8F571CECAE8A9E22C02DB PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP4 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x151 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xF80E7EE0F5DBB0F05DA199A386B01416CA62B0D5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND BALANCE SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x192 DUP2 PUSH2 0x272 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1AD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x189 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BE DUP3 PUSH2 0x272 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C9 DUP4 PUSH2 0x272 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x1D9 JUMPI PUSH2 0x1D8 PUSH2 0x2AB JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EF DUP3 PUSH2 0x272 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FA DUP4 PUSH2 0x272 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x233 JUMPI PUSH2 0x232 PUSH2 0x27C JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x249 DUP3 PUSH2 0x272 JUMP JUMPDEST SWAP2 POP PUSH2 0x254 DUP4 PUSH2 0x272 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x267 JUMPI PUSH2 0x266 PUSH2 0x27C JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE8 PUSH3 0xE4668A REVERT SWAP5 SGT 0xE1 0x27 0x2C CODESIZE 0xCD STATICCALL PUSH31 0xBD4427537B589F01CE9B1FA0BB7F81DA8B64736F6C63430008000033000000 ",
							"sourceMap": "136:473:1:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:1553:2",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "72:53:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "89:3:2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "112:5:2"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "94:17:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "94:24:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "82:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "82:37:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "82:37:2"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "60:5:2",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "67:3:2",
														"type": ""
													}
												],
												"src": "7:118:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "229:124:2",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "239:26:2",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "251:9:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "262:2:2",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "247:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "247:18:2"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "239:4:2"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "319:6:2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "332:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "343:1:2",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "328:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "328:17:2"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "275:43:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "275:71:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "275:71:2"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "201:9:2",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "213:6:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "224:4:2",
														"type": ""
													}
												],
												"src": "131:222:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "401:143:2",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "411:25:2",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "434:1:2"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "416:17:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "416:20:2"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "411:1:2"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "445:25:2",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "468:1:2"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "450:17:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "450:20:2"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "445:1:2"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "492:22:2",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nodeType": "YulIdentifier",
																				"src": "494:16:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "494:18:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "494:18:2"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "489:1:2"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "482:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "482:9:2"
															},
															"nodeType": "YulIf",
															"src": "479:2:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "524:14:2",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "533:1:2"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "536:1:2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "529:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "529:9:2"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "524:1:2"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "390:1:2",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "393:1:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "399:1:2",
														"type": ""
													}
												],
												"src": "359:185:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "598:300:2",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "608:25:2",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "631:1:2"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "613:17:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "613:20:2"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "608:1:2"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "642:25:2",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "665:1:2"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "647:17:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "647:20:2"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "642:1:2"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "840:22:2",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "842:16:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "842:18:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "842:18:2"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "752:1:2"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "745:6:2"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "745:9:2"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "738:6:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "738:17:2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "760:1:2"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "767:66:2",
																						"type": "",
																						"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "835:1:2"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "763:3:2"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "763:74:2"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "757:2:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "757:81:2"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "734:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "734:105:2"
															},
															"nodeType": "YulIf",
															"src": "731:2:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "872:20:2",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "887:1:2"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "890:1:2"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "883:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "883:9:2"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "872:7:2"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "581:1:2",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "584:1:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "590:7:2",
														"type": ""
													}
												],
												"src": "550:348:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "949:146:2",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "959:25:2",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "982:1:2"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "964:17:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "964:20:2"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "959:1:2"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "993:25:2",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "1016:1:2"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "998:17:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "998:20:2"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "993:1:2"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1040:22:2",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "1042:16:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1042:18:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1042:18:2"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "1034:1:2"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "1037:1:2"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "1031:2:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1031:8:2"
															},
															"nodeType": "YulIf",
															"src": "1028:2:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1072:17:2",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "1084:1:2"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "1087:1:2"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1080:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1080:9:2"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "1072:4:2"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "935:1:2",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "938:1:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "944:4:2",
														"type": ""
													}
												],
												"src": "904:191:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1146:32:2",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1156:16:2",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1167:5:2"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1156:7:2"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1128:5:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1138:7:2",
														"type": ""
													}
												],
												"src": "1101:77:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1212:152:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1229:1:2",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1232:77:2",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1222:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1222:88:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1222:88:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1326:1:2",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1329:4:2",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1319:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1319:15:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1319:15:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1350:1:2",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1353:4:2",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1343:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1343:15:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1343:15:2"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "1184:180:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1398:152:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1415:1:2",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1418:77:2",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1408:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1408:88:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1408:88:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1512:1:2",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1515:4:2",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1505:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1505:15:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1505:15:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1536:1:2",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1539:4:2",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1529:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1529:15:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1529:15:2"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "1370:180:2"
											}
										]
									},
									"contents": "{\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n}\n",
									"id": 2,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600436106100295760003560e01c8063a6f2ae3a1461002e578063c71daccb14610038575b600080fd5b610036610063565b005b34801561004457600080fd5b5061004d610156565b60405161005a9190610198565b60405180910390f35b6000806101f46103e83461007791906101b3565b61008191906101e4565b9050803461008f919061023e565b91507378731d3ca6b7e34ac0f824c42a7cc18a495cabab73ffffffffffffffffffffffffffffffffffffffff166108fc82346100cb919061023e565b9081150290604051600060405180830381858888f193505050501580156100f6573d6000803e3d6000fd5b50734b20993bc481177ec7e8f571cecae8a9e22c02db73ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610151573d6000803e3d6000fd5b505050565b600073f80e7ee0f5dbb0f05da199a386b01416ca62b0d573ffffffffffffffffffffffffffffffffffffffff1631905090565b61019281610272565b82525050565b60006020820190506101ad6000830184610189565b92915050565b60006101be82610272565b91506101c983610272565b9250826101d9576101d86102ab565b5b828204905092915050565b60006101ef82610272565b91506101fa83610272565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156102335761023261027c565b5b828202905092915050565b600061024982610272565b915061025483610272565b9250828210156102675761026661027c565b5b828203905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea26469706673582212205362e4668afd9413e1272c38cdfa7ebd4427537b589f01ce9b1fa0bb7f81da8b64736f6c63430008000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x29 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA6F2AE3A EQ PUSH2 0x2E JUMPI DUP1 PUSH4 0xC71DACCB EQ PUSH2 0x38 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x36 PUSH2 0x63 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D PUSH2 0x156 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5A SWAP2 SWAP1 PUSH2 0x198 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1F4 PUSH2 0x3E8 CALLVALUE PUSH2 0x77 SWAP2 SWAP1 PUSH2 0x1B3 JUMP JUMPDEST PUSH2 0x81 SWAP2 SWAP1 PUSH2 0x1E4 JUMP JUMPDEST SWAP1 POP DUP1 CALLVALUE PUSH2 0x8F SWAP2 SWAP1 PUSH2 0x23E JUMP JUMPDEST SWAP2 POP PUSH20 0x78731D3CA6B7E34AC0F824C42A7CC18A495CABAB PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 CALLVALUE PUSH2 0xCB SWAP2 SWAP1 PUSH2 0x23E JUMP JUMPDEST SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xF6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH20 0x4B20993BC481177EC7E8F571CECAE8A9E22C02DB PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP4 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x151 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xF80E7EE0F5DBB0F05DA199A386B01416CA62B0D5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND BALANCE SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x192 DUP2 PUSH2 0x272 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1AD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x189 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BE DUP3 PUSH2 0x272 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C9 DUP4 PUSH2 0x272 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x1D9 JUMPI PUSH2 0x1D8 PUSH2 0x2AB JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EF DUP3 PUSH2 0x272 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FA DUP4 PUSH2 0x272 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x233 JUMPI PUSH2 0x232 PUSH2 0x27C JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x249 DUP3 PUSH2 0x272 JUMP JUMPDEST SWAP2 POP PUSH2 0x254 DUP4 PUSH2 0x272 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x267 JUMPI PUSH2 0x266 PUSH2 0x27C JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE8 PUSH3 0xE4668A REVERT SWAP5 SGT 0xE1 0x27 0x2C CODESIZE 0xCD STATICCALL PUSH31 0xBD4427537B589F01CE9B1FA0BB7F81DA8B64736F6C63430008000033000000 ",
							"sourceMap": "136:473:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;184:282;;;:::i;:::-;;468:137;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;184:282;223:11;244:8;272:3;265:4;255:9;:14;;;;:::i;:::-;:20;;;;:::i;:::-;244:31;;302:3;290:9;:15;;;;:::i;:::-;281:24;;319:42;311:60;;:77;384:3;372:9;:15;;;;:::i;:::-;311:77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;402:42;394:60;;:68;455:6;394:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;184:282;;:::o;468:137::-;512:11;545:42;537:59;;;530:66;;468:137;:::o;7:118:2:-;94:24;112:5;94:24;:::i;:::-;89:3;82:37;72:53;;:::o;131:222::-;;262:2;251:9;247:18;239:26;;275:71;343:1;332:9;328:17;319:6;275:71;:::i;:::-;229:124;;;;:::o;359:185::-;;416:20;434:1;416:20;:::i;:::-;411:25;;450:20;468:1;450:20;:::i;:::-;445:25;;489:1;479:2;;494:18;;:::i;:::-;479:2;536:1;533;529:9;524:14;;401:143;;;;:::o;550:348::-;;613:20;631:1;613:20;:::i;:::-;608:25;;647:20;665:1;647:20;:::i;:::-;642:25;;835:1;767:66;763:74;760:1;757:81;752:1;745:9;738:17;734:105;731:2;;;842:18;;:::i;:::-;731:2;890:1;887;883:9;872:20;;598:300;;;;:::o;904:191::-;;964:20;982:1;964:20;:::i;:::-;959:25;;998:20;1016:1;998:20;:::i;:::-;993:25;;1037:1;1034;1031:8;1028:2;;;1042:18;;:::i;:::-;1028:2;1087:1;1084;1080:9;1072:17;;949:146;;;;:::o;1101:77::-;;1167:5;1156:16;;1146:32;;;:::o;1184:180::-;1232:77;1229:1;1222:88;1329:4;1326:1;1319:15;1353:4;1350:1;1343:15;1370:180;1418:77;1415:1;1408:88;1515:4;1512:1;1505:15;1539:4;1536:1;1529:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "156800",
								"executionCost": "202",
								"totalCost": "157002"
							},
							"external": {
								"buy()": "infinite",
								"checkBalance()": "1043"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 136,
									"end": 609,
									"name": "PUSH",
									"source": 1,
									"value": "80"
								},
								{
									"begin": 136,
									"end": 609,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 136,
									"end": 609,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 136,
									"end": 609,
									"name": "CALLVALUE",
									"source": 1
								},
								{
									"begin": 136,
									"end": 609,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 136,
									"end": 609,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 136,
									"end": 609,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 136,
									"end": 609,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 136,
									"end": 609,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 136,
									"end": 609,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 136,
									"end": 609,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 136,
									"end": 609,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 136,
									"end": 609,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 136,
									"end": 609,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 136,
									"end": 609,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 136,
									"end": 609,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 136,
									"end": 609,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 136,
									"end": 609,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 136,
									"end": 609,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 136,
									"end": 609,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 136,
									"end": 609,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205362e4668afd9413e1272c38cdfa7ebd4427537b589f01ce9b1fa0bb7f81da8b64736f6c63430008000033",
									".code": [
										{
											"begin": 136,
											"end": 609,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 136,
											"end": 609,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 136,
											"end": 609,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 136,
											"end": 609,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 136,
											"end": 609,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 136,
											"end": 609,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 136,
											"end": 609,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 136,
											"end": 609,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 136,
											"end": 609,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 136,
											"end": 609,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 136,
											"end": 609,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 136,
											"end": 609,
											"name": "SHR",
											"source": 1
										},
										{
											"begin": 136,
											"end": 609,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 136,
											"end": 609,
											"name": "PUSH",
											"source": 1,
											"value": "A6F2AE3A"
										},
										{
											"begin": 136,
											"end": 609,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 136,
											"end": 609,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 136,
											"end": 609,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 136,
											"end": 609,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 136,
											"end": 609,
											"name": "PUSH",
											"source": 1,
											"value": "C71DACCB"
										},
										{
											"begin": 136,
											"end": 609,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 136,
											"end": 609,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 136,
											"end": 609,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 136,
											"end": 609,
											"name": "tag",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 136,
											"end": 609,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 136,
											"end": 609,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 136,
											"end": 609,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 136,
											"end": 609,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 184,
											"end": 466,
											"name": "tag",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 184,
											"end": 466,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 184,
											"end": 466,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 184,
											"end": 466,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 184,
											"end": 466,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 184,
											"end": 466,
											"name": "tag",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 184,
											"end": 466,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 184,
											"end": 466,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 468,
											"end": 605,
											"name": "tag",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 468,
											"end": 605,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 468,
											"end": 605,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 468,
											"end": 605,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 468,
											"end": 605,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 468,
											"end": 605,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 468,
											"end": 605,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 468,
											"end": 605,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 468,
											"end": 605,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 468,
											"end": 605,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 468,
											"end": 605,
											"name": "tag",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 468,
											"end": 605,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 468,
											"end": 605,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 468,
											"end": 605,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 468,
											"end": 605,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 468,
											"end": 605,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 468,
											"end": 605,
											"name": "tag",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 468,
											"end": 605,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 468,
											"end": 605,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 468,
											"end": 605,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 468,
											"end": 605,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 468,
											"end": 605,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 468,
											"end": 605,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 468,
											"end": 605,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 468,
											"end": 605,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 468,
											"end": 605,
											"name": "tag",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 468,
											"end": 605,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 468,
											"end": 605,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 468,
											"end": 605,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 468,
											"end": 605,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 468,
											"end": 605,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 468,
											"end": 605,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 468,
											"end": 605,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 468,
											"end": 605,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 184,
											"end": 466,
											"name": "tag",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 184,
											"end": 466,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 223,
											"end": 234,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 244,
											"end": 252,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 272,
											"end": 275,
											"name": "PUSH",
											"source": 1,
											"value": "1F4"
										},
										{
											"begin": 265,
											"end": 269,
											"name": "PUSH",
											"source": 1,
											"value": "3E8"
										},
										{
											"begin": 255,
											"end": 264,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 255,
											"end": 269,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 255,
											"end": 269,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 255,
											"end": 269,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 255,
											"end": 269,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 255,
											"end": 269,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 255,
											"end": 269,
											"name": "tag",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 255,
											"end": 269,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 255,
											"end": 275,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 255,
											"end": 275,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 255,
											"end": 275,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 255,
											"end": 275,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 255,
											"end": 275,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 255,
											"end": 275,
											"name": "tag",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 255,
											"end": 275,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 244,
											"end": 275,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 244,
											"end": 275,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 302,
											"end": 305,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 290,
											"end": 299,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 290,
											"end": 305,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 290,
											"end": 305,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 290,
											"end": 305,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 290,
											"end": 305,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 290,
											"end": 305,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 290,
											"end": 305,
											"name": "tag",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 290,
											"end": 305,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 281,
											"end": 305,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 281,
											"end": 305,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 319,
											"end": 361,
											"name": "PUSH",
											"source": 1,
											"value": "78731D3CA6B7E34AC0F824C42A7CC18A495CABAB"
										},
										{
											"begin": 311,
											"end": 371,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 311,
											"end": 371,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "PUSH",
											"source": 1,
											"value": "8FC"
										},
										{
											"begin": 384,
											"end": 387,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 372,
											"end": 381,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 372,
											"end": 387,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 372,
											"end": 387,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 372,
											"end": 387,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 372,
											"end": 387,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 372,
											"end": 387,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 372,
											"end": 387,
											"name": "tag",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 372,
											"end": 387,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 311,
											"end": 388,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 311,
											"end": 388,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 311,
											"end": 388,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "CALL",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 311,
											"end": 388,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "RETURNDATASIZE",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 311,
											"end": 388,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "RETURNDATACOPY",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "RETURNDATASIZE",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 311,
											"end": 388,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "tag",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 311,
											"end": 388,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 311,
											"end": 388,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 402,
											"end": 444,
											"name": "PUSH",
											"source": 1,
											"value": "4B20993BC481177EC7E8F571CECAE8A9E22C02DB"
										},
										{
											"begin": 394,
											"end": 454,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 394,
											"end": 454,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "PUSH",
											"source": 1,
											"value": "8FC"
										},
										{
											"begin": 455,
											"end": 461,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 394,
											"end": 462,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 394,
											"end": 462,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 394,
											"end": 462,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "CALL",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "22"
										},
										{
											"begin": 394,
											"end": 462,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "RETURNDATASIZE",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 394,
											"end": 462,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "RETURNDATACOPY",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "RETURNDATASIZE",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 394,
											"end": 462,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "tag",
											"source": 1,
											"value": "22"
										},
										{
											"begin": 394,
											"end": 462,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 394,
											"end": 462,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 184,
											"end": 466,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 184,
											"end": 466,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 184,
											"end": 466,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 468,
											"end": 605,
											"name": "tag",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 468,
											"end": 605,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 512,
											"end": 523,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 545,
											"end": 587,
											"name": "PUSH",
											"source": 1,
											"value": "F80E7EE0F5DBB0F05DA199A386B01416CA62B0D5"
										},
										{
											"begin": 537,
											"end": 596,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 537,
											"end": 596,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 537,
											"end": 596,
											"name": "BALANCE",
											"source": 1
										},
										{
											"begin": 530,
											"end": 596,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 530,
											"end": 596,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 468,
											"end": 605,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 468,
											"end": 605,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 125,
											"name": "tag",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 7,
											"end": 125,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 94,
											"end": 118,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 112,
											"end": 117,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 94,
											"end": 118,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 94,
											"end": 118,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 94,
											"end": 118,
											"name": "tag",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 94,
											"end": 118,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 89,
											"end": 92,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 82,
											"end": 119,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 72,
											"end": 125,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 72,
											"end": 125,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 72,
											"end": 125,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 131,
											"end": 353,
											"name": "tag",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 131,
											"end": 353,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 131,
											"end": 353,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 262,
											"end": 264,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 251,
											"end": 260,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 247,
											"end": 265,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 239,
											"end": 265,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 239,
											"end": 265,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 275,
											"end": 346,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 343,
											"end": 344,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 332,
											"end": 341,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 328,
											"end": 345,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 319,
											"end": 325,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 275,
											"end": 346,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 275,
											"end": 346,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 275,
											"end": 346,
											"name": "tag",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 275,
											"end": 346,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 229,
											"end": 353,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 229,
											"end": 353,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 229,
											"end": 353,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 229,
											"end": 353,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 229,
											"end": 353,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 359,
											"end": 544,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 359,
											"end": 544,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 359,
											"end": 544,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 416,
											"end": 436,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 434,
											"end": 435,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 416,
											"end": 436,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 416,
											"end": 436,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 416,
											"end": 436,
											"name": "tag",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 416,
											"end": 436,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 411,
											"end": 436,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 411,
											"end": 436,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 450,
											"end": 470,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 468,
											"end": 469,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 450,
											"end": 470,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 450,
											"end": 470,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 450,
											"end": 470,
											"name": "tag",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 450,
											"end": 470,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 445,
											"end": 470,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 445,
											"end": 470,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 489,
											"end": 490,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 479,
											"end": 481,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 479,
											"end": 481,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 494,
											"end": 512,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 494,
											"end": 512,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 494,
											"end": 512,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 494,
											"end": 512,
											"name": "tag",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 494,
											"end": 512,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 479,
											"end": 481,
											"name": "tag",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 479,
											"end": 481,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 536,
											"end": 537,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 533,
											"end": 534,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 529,
											"end": 538,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 524,
											"end": 538,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 524,
											"end": 538,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 401,
											"end": 544,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 401,
											"end": 544,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 401,
											"end": 544,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 401,
											"end": 544,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 401,
											"end": 544,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 550,
											"end": 898,
											"name": "tag",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 550,
											"end": 898,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 550,
											"end": 898,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 613,
											"end": 633,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 631,
											"end": 632,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 613,
											"end": 633,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 613,
											"end": 633,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 613,
											"end": 633,
											"name": "tag",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 613,
											"end": 633,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 608,
											"end": 633,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 608,
											"end": 633,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 647,
											"end": 667,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 665,
											"end": 666,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 647,
											"end": 667,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 647,
											"end": 667,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 647,
											"end": 667,
											"name": "tag",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 647,
											"end": 667,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 642,
											"end": 667,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 642,
											"end": 667,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 835,
											"end": 836,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 767,
											"end": 833,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 763,
											"end": 837,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 760,
											"end": 761,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 757,
											"end": 838,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 752,
											"end": 753,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 745,
											"end": 754,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 738,
											"end": 755,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 734,
											"end": 839,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 731,
											"end": 733,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 731,
											"end": 733,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 731,
											"end": 733,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 842,
											"end": 860,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 842,
											"end": 860,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 842,
											"end": 860,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 842,
											"end": 860,
											"name": "tag",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 842,
											"end": 860,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 731,
											"end": 733,
											"name": "tag",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 731,
											"end": 733,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 890,
											"end": 891,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 887,
											"end": 888,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 883,
											"end": 892,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 872,
											"end": 892,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 872,
											"end": 892,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 598,
											"end": 898,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 598,
											"end": 898,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 598,
											"end": 898,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 598,
											"end": 898,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 598,
											"end": 898,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 904,
											"end": 1095,
											"name": "tag",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 904,
											"end": 1095,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 904,
											"end": 1095,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 964,
											"end": 984,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 982,
											"end": 983,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 964,
											"end": 984,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 964,
											"end": 984,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 964,
											"end": 984,
											"name": "tag",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 964,
											"end": 984,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 959,
											"end": 984,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 959,
											"end": 984,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 998,
											"end": 1018,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 1016,
											"end": 1017,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 998,
											"end": 1018,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 998,
											"end": 1018,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 998,
											"end": 1018,
											"name": "tag",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 998,
											"end": 1018,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 993,
											"end": 1018,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 993,
											"end": 1018,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1037,
											"end": 1038,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1034,
											"end": 1035,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1031,
											"end": 1039,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1028,
											"end": 1030,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1028,
											"end": 1030,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 1028,
											"end": 1030,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1042,
											"end": 1060,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 1042,
											"end": 1060,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 1042,
											"end": 1060,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1042,
											"end": 1060,
											"name": "tag",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 1042,
											"end": 1060,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1028,
											"end": 1030,
											"name": "tag",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 1028,
											"end": 1030,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1087,
											"end": 1088,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1084,
											"end": 1085,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1080,
											"end": 1089,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1072,
											"end": 1089,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1072,
											"end": 1089,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 949,
											"end": 1095,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 949,
											"end": 1095,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 949,
											"end": 1095,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 949,
											"end": 1095,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 949,
											"end": 1095,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1101,
											"end": 1178,
											"name": "tag",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 1101,
											"end": 1178,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1101,
											"end": 1178,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1167,
											"end": 1172,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1156,
											"end": 1172,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1156,
											"end": 1172,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1146,
											"end": 1178,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1146,
											"end": 1178,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1146,
											"end": 1178,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1146,
											"end": 1178,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1184,
											"end": 1364,
											"name": "tag",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 1184,
											"end": 1364,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1232,
											"end": 1309,
											"name": "PUSH",
											"source": 2,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1229,
											"end": 1230,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1222,
											"end": 1310,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1329,
											"end": 1333,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 1326,
											"end": 1327,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1319,
											"end": 1334,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1353,
											"end": 1357,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1350,
											"end": 1351,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1343,
											"end": 1358,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1370,
											"end": 1550,
											"name": "tag",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 1370,
											"end": 1550,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1418,
											"end": 1495,
											"name": "PUSH",
											"source": 2,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1415,
											"end": 1416,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1408,
											"end": 1496,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 1519,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 1512,
											"end": 1513,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1505,
											"end": 1520,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1539,
											"end": 1543,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1536,
											"end": 1537,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1529,
											"end": 1544,
											"name": "REVERT",
											"source": 2
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"buy()": "a6f2ae3a",
							"checkBalance()": "c71daccb"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test.sol\":\"testing\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x80a62a632fb210251e8a7632c66d8624fd1c2e60b75b3e08c8b04803abec336f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0163070ead773cf28c76b7d88abb8ecf1c0a2cebda62cc44ca91f60faae361d6\",\"dweb:/ipfs/QmfVwE4pVia7L7LMbSkQRUWzmX6f4XpdagrrXh7or2qhyd\"]},\"test.sol\":{\"keccak256\":\"0x23c31863eac7826421039b2dc5f19ce394d94eeec2a0109bade12f8d3f11c7ad\",\"urls\":[\"bzz-raw://6557cfc627034b226f4d24a59a1be2272cbed3db69ffb16cc9ec4965bd341394\",\"dweb:/ipfs/QmSJS82a3jq6cwyAmpeAPq3j3YXotspRvS9vwxsnYtU6tB\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> test.sol\n\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "test.sol",
					"start": -1
				},
				"type": "Warning"
			}
		],
		"sources": {
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							311
						]
					},
					"id": 312,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "92:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "270:196:0",
								"text": " @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."
							},
							"fullyImplemented": true,
							"id": 311,
							"linearizedBaseContracts": [
								311
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 33,
										"nodeType": "Block",
										"src": "702:140:0",
										"statements": [
											{
												"id": 32,
												"nodeType": "UncheckedBlock",
												"src": "712:124:0",
												"statements": [
													{
														"assignments": [
															15
														],
														"declarations": [
															{
																"constant": false,
																"id": 15,
																"mutability": "mutable",
																"name": "c",
																"nodeType": "VariableDeclaration",
																"scope": 32,
																"src": "736:9:0",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 14,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "736:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 19,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 18,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 16,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 5,
																"src": "748:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 17,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "752:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "748:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "736:17:0"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 22,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 20,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 15,
																"src": "771:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 21,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 5,
																"src": "775:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "771:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 27,
														"nodeType": "IfStatement",
														"src": "767:28:0",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 23,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "786:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 24,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "793:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 25,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "785:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 13,
															"id": 26,
															"nodeType": "Return",
															"src": "778:17:0"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 28,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "817:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 29,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 15,
																	"src": "823:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 30,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "816:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 13,
														"id": 31,
														"nodeType": "Return",
														"src": "809:16:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "490:131:0",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 34,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 8,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "642:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "642:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "653:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 6,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "653:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "641:22:0"
									},
									"returnParameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 10,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "687:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 9,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "687:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 12,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "693:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 11,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "686:15:0"
									},
									"scope": 311,
									"src": "626:216:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 61,
										"nodeType": "Block",
										"src": "1063:113:0",
										"statements": [
											{
												"id": 60,
												"nodeType": "UncheckedBlock",
												"src": "1073:97:0",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 48,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 46,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 39,
																"src": "1101:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 47,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 37,
																"src": "1105:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1101:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 53,
														"nodeType": "IfStatement",
														"src": "1097:28:0",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 49,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1116:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 50,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1123:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 51,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1115:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 45,
															"id": 52,
															"nodeType": "Return",
															"src": "1108:17:0"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 54,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1147:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 57,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 55,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 37,
																		"src": "1153:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 56,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 39,
																		"src": "1157:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1153:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 58,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1146:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 45,
														"id": 59,
														"nodeType": "Return",
														"src": "1139:20:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 35,
										"nodeType": "StructuredDocumentation",
										"src": "848:134:0",
										"text": " @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 62,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "1003:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 36,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1003:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "1014:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 38,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1014:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1002:22:0"
									},
									"returnParameters": {
										"id": 45,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "1048:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 41,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1048:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 44,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "1054:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 43,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1054:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1047:15:0"
									},
									"scope": 311,
									"src": "987:189:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 103,
										"nodeType": "Block",
										"src": "1400:417:0",
										"statements": [
											{
												"id": 102,
												"nodeType": "UncheckedBlock",
												"src": "1410:401:0",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 76,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 74,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 65,
																"src": "1668:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 75,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1673:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1668:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 81,
														"nodeType": "IfStatement",
														"src": "1664:28:0",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 77,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1684:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 78,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1690:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 79,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1683:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 73,
															"id": 80,
															"nodeType": "Return",
															"src": "1676:16:0"
														}
													},
													{
														"assignments": [
															83
														],
														"declarations": [
															{
																"constant": false,
																"id": 83,
																"mutability": "mutable",
																"name": "c",
																"nodeType": "VariableDeclaration",
																"scope": 102,
																"src": "1706:9:0",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 82,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1706:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 87,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 86,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 84,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 65,
																"src": "1718:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 85,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 67,
																"src": "1722:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1718:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1706:17:0"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 92,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 90,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 88,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 83,
																	"src": "1741:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 89,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 65,
																	"src": "1745:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1741:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 91,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 67,
																"src": "1750:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1741:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 97,
														"nodeType": "IfStatement",
														"src": "1737:33:0",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 93,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1761:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 94,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1768:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 95,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1760:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 73,
															"id": 96,
															"nodeType": "Return",
															"src": "1753:17:0"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 98,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1792:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 99,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 83,
																	"src": "1798:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 100,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1791:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 73,
														"id": 101,
														"nodeType": "Return",
														"src": "1784:16:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 63,
										"nodeType": "StructuredDocumentation",
										"src": "1182:137:0",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 104,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 68,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 65,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "1340:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 64,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1340:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "1351:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 66,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1351:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1339:22:0"
									},
									"returnParameters": {
										"id": 73,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 70,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "1385:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 69,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1385:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 72,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "1391:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 71,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1391:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1384:15:0"
									},
									"scope": 311,
									"src": "1324:493:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 131,
										"nodeType": "Block",
										"src": "2042:114:0",
										"statements": [
											{
												"id": 130,
												"nodeType": "UncheckedBlock",
												"src": "2052:98:0",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 118,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 116,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 109,
																"src": "2080:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 117,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2085:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2080:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 123,
														"nodeType": "IfStatement",
														"src": "2076:29:0",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 119,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2096:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 120,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2103:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 121,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2095:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 115,
															"id": 122,
															"nodeType": "Return",
															"src": "2088:17:0"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 124,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2127:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 127,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 125,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 107,
																		"src": "2133:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 126,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 109,
																		"src": "2137:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2133:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 128,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2126:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 115,
														"id": 129,
														"nodeType": "Return",
														"src": "2119:20:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 105,
										"nodeType": "StructuredDocumentation",
										"src": "1823:138:0",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 132,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 107,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "1982:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 106,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1982:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 109,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "1993:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 108,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1993:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1981:22:0"
									},
									"returnParameters": {
										"id": 115,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 112,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "2027:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 111,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2027:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 114,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "2033:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 113,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2033:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2026:15:0"
									},
									"scope": 311,
									"src": "1966:190:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 159,
										"nodeType": "Block",
										"src": "2391:114:0",
										"statements": [
											{
												"id": 158,
												"nodeType": "UncheckedBlock",
												"src": "2401:98:0",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 146,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 144,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 137,
																"src": "2429:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 145,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2434:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2429:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 151,
														"nodeType": "IfStatement",
														"src": "2425:29:0",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 147,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2445:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 148,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2452:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 149,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2444:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 143,
															"id": 150,
															"nodeType": "Return",
															"src": "2437:17:0"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 152,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2476:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 155,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 153,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 135,
																		"src": "2482:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 154,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 137,
																		"src": "2486:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2482:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 156,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2475:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 143,
														"id": 157,
														"nodeType": "Return",
														"src": "2468:20:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 133,
										"nodeType": "StructuredDocumentation",
										"src": "2162:148:0",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 160,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 138,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 135,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "2331:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 134,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2331:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 137,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "2342:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 136,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2342:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2330:22:0"
									},
									"returnParameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 140,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "2376:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 139,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2376:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "2382:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 141,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2382:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2375:15:0"
									},
									"scope": 311,
									"src": "2315:190:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 174,
										"nodeType": "Block",
										"src": "2807:29:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 172,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 170,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 163,
														"src": "2824:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 171,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 165,
														"src": "2828:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2824:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 169,
												"id": 173,
												"nodeType": "Return",
												"src": "2817:12:0"
											}
										]
									},
									"documentation": {
										"id": 161,
										"nodeType": "StructuredDocumentation",
										"src": "2511:224:0",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 175,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 163,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 175,
												"src": "2753:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 162,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2753:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 165,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 175,
												"src": "2764:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 164,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2764:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2752:22:0"
									},
									"returnParameters": {
										"id": 169,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 168,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 175,
												"src": "2798:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 167,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2798:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2797:9:0"
									},
									"scope": 311,
									"src": "2740:96:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 189,
										"nodeType": "Block",
										"src": "3174:29:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 187,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 185,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 178,
														"src": "3191:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 186,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 180,
														"src": "3195:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3191:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 184,
												"id": 188,
												"nodeType": "Return",
												"src": "3184:12:0"
											}
										]
									},
									"documentation": {
										"id": 176,
										"nodeType": "StructuredDocumentation",
										"src": "2842:260:0",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 190,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 178,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "3120:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 177,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3120:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "3131:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 179,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3131:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3119:22:0"
									},
									"returnParameters": {
										"id": 184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 183,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "3165:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 182,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3165:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3164:9:0"
									},
									"scope": 311,
									"src": "3107:96:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 204,
										"nodeType": "Block",
										"src": "3517:29:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 202,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 200,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 193,
														"src": "3534:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 201,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 195,
														"src": "3538:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3534:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 199,
												"id": 203,
												"nodeType": "Return",
												"src": "3527:12:0"
											}
										]
									},
									"documentation": {
										"id": 191,
										"nodeType": "StructuredDocumentation",
										"src": "3209:236:0",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 205,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 193,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 205,
												"src": "3463:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 192,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3463:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 195,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 205,
												"src": "3474:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 194,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3474:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3462:22:0"
									},
									"returnParameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 205,
												"src": "3508:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3508:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3507:9:0"
									},
									"scope": 311,
									"src": "3450:96:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 219,
										"nodeType": "Block",
										"src": "3902:29:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 217,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 215,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 208,
														"src": "3919:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 216,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 210,
														"src": "3923:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3919:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 214,
												"id": 218,
												"nodeType": "Return",
												"src": "3912:12:0"
											}
										]
									},
									"documentation": {
										"id": 206,
										"nodeType": "StructuredDocumentation",
										"src": "3552:278:0",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 220,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 208,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 220,
												"src": "3848:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 207,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3848:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 210,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 220,
												"src": "3859:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 209,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3859:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3847:22:0"
									},
									"returnParameters": {
										"id": 214,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 213,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 220,
												"src": "3893:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 212,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3893:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3892:9:0"
									},
									"scope": 311,
									"src": "3835:96:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 234,
										"nodeType": "Block",
										"src": "4451:29:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 232,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 230,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 223,
														"src": "4468:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 231,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 225,
														"src": "4472:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4468:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 229,
												"id": 233,
												"nodeType": "Return",
												"src": "4461:12:0"
											}
										]
									},
									"documentation": {
										"id": 221,
										"nodeType": "StructuredDocumentation",
										"src": "3937:442:0",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 235,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 226,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 235,
												"src": "4397:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 222,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4397:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 225,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 235,
												"src": "4408:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 224,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4408:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4396:22:0"
									},
									"returnParameters": {
										"id": 229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 228,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 235,
												"src": "4442:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 227,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4442:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4441:9:0"
									},
									"scope": 311,
									"src": "4384:96:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 259,
										"nodeType": "Block",
										"src": "5069:106:0",
										"statements": [
											{
												"id": 258,
												"nodeType": "UncheckedBlock",
												"src": "5079:90:0",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 250,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 248,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 240,
																		"src": "5111:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<=",
																	"rightExpression": {
																		"id": 249,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 238,
																		"src": "5116:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5111:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 251,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 242,
																	"src": "5119:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 247,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5103:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 252,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5103:29:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 253,
														"nodeType": "ExpressionStatement",
														"src": "5103:29:0"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 256,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 254,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 238,
																"src": "5153:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 255,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 240,
																"src": "5157:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5153:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 246,
														"id": 257,
														"nodeType": "Return",
														"src": "5146:12:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 236,
										"nodeType": "StructuredDocumentation",
										"src": "4486:453:0",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 260,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 238,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "4966:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 237,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4966:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 240,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "4985:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 239,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4985:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 242,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "5004:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 241,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5004:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4956:80:0"
									},
									"returnParameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 245,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "5060:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 244,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5060:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5059:9:0"
									},
									"scope": 311,
									"src": "4944:231:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 284,
										"nodeType": "Block",
										"src": "5784:105:0",
										"statements": [
											{
												"id": 283,
												"nodeType": "UncheckedBlock",
												"src": "5794:89:0",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 275,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 273,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 265,
																		"src": "5826:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 274,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5830:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5826:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 276,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 267,
																	"src": "5833:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 272,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5818:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 277,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5818:28:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 278,
														"nodeType": "ExpressionStatement",
														"src": "5818:28:0"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 281,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 279,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 263,
																"src": "5867:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 280,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 265,
																"src": "5871:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5867:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 271,
														"id": 282,
														"nodeType": "Return",
														"src": "5860:12:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 261,
										"nodeType": "StructuredDocumentation",
										"src": "5181:473:0",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 285,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 285,
												"src": "5681:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 262,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5681:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 265,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 285,
												"src": "5700:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 264,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5700:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 285,
												"src": "5719:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 266,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5719:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5671:80:0"
									},
									"returnParameters": {
										"id": 271,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 270,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 285,
												"src": "5775:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 269,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5775:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5774:9:0"
									},
									"scope": 311,
									"src": "5659:230:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 309,
										"nodeType": "Block",
										"src": "6660:105:0",
										"statements": [
											{
												"id": 308,
												"nodeType": "UncheckedBlock",
												"src": "6670:89:0",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 300,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 298,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 290,
																		"src": "6702:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 299,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6706:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "6702:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 301,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 292,
																	"src": "6709:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 297,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "6694:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 302,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6694:28:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 303,
														"nodeType": "ExpressionStatement",
														"src": "6694:28:0"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 306,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 304,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 288,
																"src": "6743:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 305,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 290,
																"src": "6747:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6743:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 296,
														"id": 307,
														"nodeType": "Return",
														"src": "6736:12:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 286,
										"nodeType": "StructuredDocumentation",
										"src": "5895:635:0",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 310,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 288,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 310,
												"src": "6557:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 287,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6557:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 310,
												"src": "6576:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 289,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6576:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 292,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 310,
												"src": "6595:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 291,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6595:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6547:80:0"
									},
									"returnParameters": {
										"id": 296,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 295,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 310,
												"src": "6651:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 294,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6651:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6650:9:0"
									},
									"scope": 311,
									"src": "6535:230:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 312,
							"src": "467:6300:0"
						}
					],
					"src": "92:6676:0"
				},
				"id": 0
			},
			"test.sol": {
				"ast": {
					"absolutePath": "test.sol",
					"exportedSymbols": {
						"SafeMath": [
							311
						],
						"testing": [
							373
						]
					},
					"id": 374,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 313,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:1"
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol",
							"file": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol",
							"id": 314,
							"nodeType": "ImportDirective",
							"scope": 374,
							"sourceUnit": 312,
							"src": "25:110:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 373,
							"linearizedBaseContracts": [
								373
							],
							"name": "testing",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 317,
									"libraryName": {
										"id": 315,
										"name": "SafeMath",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 311,
										"src": "162:8:1"
									},
									"nodeType": "UsingForDirective",
									"src": "156:27:1",
									"typeName": {
										"id": 316,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "175:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"body": {
										"id": 359,
										"nodeType": "Block",
										"src": "216:250:1",
										"statements": [
											{
												"assignments": [
													321
												],
												"declarations": [
													{
														"constant": false,
														"id": 321,
														"mutability": "mutable",
														"name": "amount",
														"nodeType": "VariableDeclaration",
														"scope": 359,
														"src": "223:11:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 320,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "223:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 323,
												"initialValue": {
													"hexValue": "30",
													"id": 322,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "237:1:1",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "223:15:1"
											},
											{
												"assignments": [
													325
												],
												"declarations": [
													{
														"constant": false,
														"id": 325,
														"mutability": "mutable",
														"name": "tax",
														"nodeType": "VariableDeclaration",
														"scope": 359,
														"src": "244:8:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 324,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "244:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 332,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 331,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 329,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 326,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "255:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 327,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "255:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "31303030",
															"id": 328,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "265:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1000_by_1",
																"typeString": "int_const 1000"
															},
															"value": "1000"
														},
														"src": "255:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"hexValue": "353030",
														"id": 330,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "272:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_500_by_1",
															"typeString": "int_const 500"
														},
														"value": "500"
													},
													"src": "255:20:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "244:31:1"
											},
											{
												"expression": {
													"id": 338,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 333,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 321,
														"src": "281:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 337,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 334,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "290:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 335,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "290:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"id": 336,
															"name": "tax",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 325,
															"src": "302:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "290:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "281:24:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 339,
												"nodeType": "ExpressionStatement",
												"src": "281:24:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 348,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 345,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "372:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 346,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "372:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 347,
																"name": "tax",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 325,
																"src": "384:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "372:15:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"hexValue": "307837383733314433436136623745333461433046383234633432613763433138413439356361626142",
																	"id": 342,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "319:42:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"value": "0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 341,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "311:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 340,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "311:8:1",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 343,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "311:51:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 344,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "311:60:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 349,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "311:77:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 350,
												"nodeType": "ExpressionStatement",
												"src": "311:77:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 356,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 321,
															"src": "455:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"hexValue": "307834423230393933426334383131373765633745386635373163654361453841396532324330326462",
																	"id": 353,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "402:42:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"value": "0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 352,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "394:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 351,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "394:8:1",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 354,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "394:51:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 355,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "394:60:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 357,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "394:68:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 358,
												"nodeType": "ExpressionStatement",
												"src": "394:68:1"
											}
										]
									},
									"functionSelector": "a6f2ae3a",
									"id": 360,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "buy",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 318,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "196:2:1"
									},
									"returnParameters": {
										"id": 319,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "216:0:1"
									},
									"scope": 373,
									"src": "184:282:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 371,
										"nodeType": "Block",
										"src": "524:81:1",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [
															{
																"hexValue": "307866383065374545306635646242306630356441313939613338364230313431366341363262306435",
																"id": 367,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "545:42:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"value": "0xf80e7EE0f5dbB0f05dA199a386B01416cA62b0d5"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 366,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "537:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 365,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "537:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 368,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "537:51:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 369,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "balance",
													"nodeType": "MemberAccess",
													"src": "537:59:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 364,
												"id": 370,
												"nodeType": "Return",
												"src": "530:66:1"
											}
										]
									},
									"functionSelector": "c71daccb",
									"id": 372,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "checkBalance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 361,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "489:2:1"
									},
									"returnParameters": {
										"id": 364,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 363,
												"mutability": "mutable",
												"name": "val",
												"nodeType": "VariableDeclaration",
												"scope": 372,
												"src": "512:11:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 362,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "512:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "511:13:1"
									},
									"scope": 373,
									"src": "468:137:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 374,
							"src": "136:473:1"
						}
					],
					"src": "0:609:1"
				},
				"id": 1
			}
		}
	}
}